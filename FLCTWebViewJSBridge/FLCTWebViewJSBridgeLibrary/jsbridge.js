// Generated by CoffeeScript 1.8.0
(function(WIN) {
  var FLCTCommonMessage, FLCTJSBridge;
  FLCTCommonMessage = (function() {
    function FLCTCommonMessage(initData) {
      this.eventName = initData.eventName || '';
      this.data = initData.data || null;
      this.callBackId = initData.callBackId || 0;
    }

    FLCTCommonMessage.prototype.messageFormat = function() {
      return {
        'eventName': this.eventName,
        'data': this.data,
        'callBackId': this.callBackId
      };
    };

    return FLCTCommonMessage;

  })();
  FLCTJSBridge = (function() {
    var CLINET_CALLBACK_EVENTNAME, callBackList, eventList, _getMessage, _responseUniqueId, _sendMessage;

    _responseUniqueId = 100;

    callBackList = {};

    eventList = {};

    CLINET_CALLBACK_EVENTNAME = 'eventCallBack';

    _sendMessage = function(webViewMessage) {
      var message;
      message = webViewMessage.messageFormat();
      if (WIN.__FLCTWebViewsendMessageToClient) {
        WIN.__FLCTWebViewsendMessageToClient(message);
      } else if (webkit && webkit.messageHandlers.FLCTWebViewMessager) {
        webkit.messageHandlers.FLCTWebViewMessager.postMessage(message);
      }
    };

    _getMessage = function(message) {
      var callBack, clientMessage, handler;
      clientMessage = new FLCTCommonMessage(message);
      if (clientMessage.eventName !== CLINET_CALLBACK_EVENTNAME) {
        if (clientMessage.eventName in eventList) {
          handler = eventList[clientMessage.eventName];
          callBack = function(data) {
            var webviewMessage;
            webviewMessage = new FLCTCommonMessage({
              'eventName': CLINET_CALLBACK_EVENTNAME,
              'callBackId': clientMessage.callBackId,
              'data': data
            });
            return _sendMessage(webviewMessage);
          };
          return handler(clientMessage.data, callBack);
        }
      } else {
        callBack = callBackList[clientMessage.callBackId];
        callBack(clientMessage.data);
        return delete callBackList[clientMessage.callBackId];
      }
    };

    function FLCTJSBridge() {}

    FLCTJSBridge.prototype.invoke = function(eventName, data, callBack) {
      var callBackId, webviewMessage;
      callBackId = ++_responseUniqueId;
      callBackList[callBackId] = callBack;
      webviewMessage = new FLCTCommonMessage({
        'eventName': eventName,
        'callBackId': callBackId,
        'data': data
      });
      _sendMessage(webviewMessage);
    };

    FLCTJSBridge.prototype.on = function(eventName, handler) {
      if (eventName === CLINET_CALLBACK_EVENTNAME) {
        console.error("eventName can't be " + CLINET_CALLBACK_EVENTNAME);
        return;
      }
      if (typeof handler !== 'function') {
        console.error("type of " + handler + " isn't 'function'");
        return;
      }
      eventList[eventName] = handler;
    };

    return FLCTJSBridge;

  })();
  return WIN.FLCTJSBridge = new FLCTJSBridge();
})(window);
